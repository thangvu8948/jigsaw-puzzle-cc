// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        # 圆角半径
        radius: {
          value: 0.4,
          editor: {
            tooltip: "圆角半径"
          }
        }
}%

CCProgram sprite-vs %{
  //lower percision for performance
  precision mediump float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;


  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  //lower percision for performance
  precision mediump float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/uniforms/cc-global>

  in vec2 uv0;
  in vec4 color;

  uniform RoundCorner {
    // 圆角半径
    float radius;
    float alphaThreshold;
  };

  #if USE_MASK
    uniform sampler2D mainTexture;
  #endif

  #pragma builtin(local)
  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;

  vec4 frag () {
    vec2 v_uv0 = uv0;
    vec4 o = vec4(1., 1., 1., 1.);

    #if USE_TEXTURE
    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    #if ENABLE_ROUNDCORNER
    // 约束圆角半径范围在 [0.0, 0.5]
    float circleRadius = clamp(0.0, 0.5, radius);

    // 将纹理uv往左上偏移，实现偏移后的坐标系原点在纹理中心
    vec2 uv = v_uv0.xy - vec2(0.5, 0.5);
    #endif
    // uv.x , uv.y :              为偏移后的的uv
    // abs(uv.x) , abs(uv.y) :    将第二、三、四象限的点都投影到第一象限上，这样子只需要处理第一象限的情况就可以，简化判断
    // 0.5 - radius :             计算出第一象限的圆角所在圆的圆心坐标
    // (rx, ry) :                 偏移映射后的 新的uv 坐标，相对于 第一象限圆角坐在圆心坐标 的相对坐标
    float rx = abs(uv.x) - (0.5 - circleRadius);
    float ry = abs(uv.y) - (0.5 - circleRadius);

    // 区分 以第一象限圆角所在圆心坐标为原点的坐标的四个象限
    //
    // 第一象限 mx = 1, my = 1
    // 第二象限 mx = 0, my = 1
    // 第三象限 mx = 0, my = 0
    // 第四象限 mx = 1, my = 0
    // 
    // 当 mx * my 时，只要等于1，那就是标识第一象限（实际对应圆角区域所在矩形），否则就是第二、三、四象限
    float mx = step(0.5 - circleRadius, abs(uv.x));
    float my = step(0.5 - circleRadius, abs(uv.y));

    // 计算相对uv坐标到圆心的距离
    float len = length(vec2(rx, ry));

    // mx * my = 0 时，代表非圆角区域，a 值为1，代表完全采用原始纹理的透明度
    // mx * my = 1 时，代表园所所在矩形区域
    //  step(circleRadius, len) 可以区分出圆角所在矩形区域的 圆角区域 和 非圆角区域
    //    其中圆角区域值为0，非圆角区域值为1
    //      当为圆角区域时，a 值为1，代表完全采用原始纹理透明度
    //      当为非圆角区域时，a 值为0，代表完全透明
    //    至此已经实现圆角裁剪
    //  
    //  smoothstep(0., circleRadius * 0.01, len - circleRadius) 是用于抗锯齿优化
    //    原理：针对点在非圆角区域的情况，针对点在大于「圆半径一点点」地方的区域，进行平滑过渡，以实现抗锯齿
    //    其中，
    //      「圆半径一点点」用  circleRadius * 0.01 表示（0.01 可自行改变）
    //      点在大于圆半径的区域用 len - circleRadius ，此值会在 [0.0, circleRadius * 0.01] 之间时会平滑过渡
    float a = 1.0 - mx * my * step(circleRadius, len) * smoothstep(0., circleRadius * 0.01, len - circleRadius);
    o = vec4(o.rgb, o.a * a);
    return o;
  }
}%
