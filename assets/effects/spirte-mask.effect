// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        startX: {value: 0.}
        endX: {value: 0.}
        startY: {value: 0.}
        endY: {value: 0.}
        rotation: {value: 0.}
        scale: {value: [1., 1.]}
        alphaThreshold: {value: 1.}
        maskTexture: { value: white }
}%

CCProgram sprite-vs %{
  //lower percision for performance
  precision mediump float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;


  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  //lower percision for performance
  precision mediump float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/uniforms/cc-global>
  #define PI 3.1415926

  in vec2 uv0;
  in vec4 color;

  uniform Constant{
    float startX;
    float startY;
    float endX;
    float endY;
    vec2 scale;
    float rotation;
    float alphaThreshold;
  };

  #if USE_MASK
    uniform sampler2D maskTexture;
  #endif

  #if USE_TEXTURE
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  float getAlpha(vec2 pos) {
    if (pos.x < 0. || pos.y < 0.) return 0.;
    if (pos.x > 1. || pos.y > 1.) return 0.;

    return CCSampleWithAlphaSeparated(maskTexture, pos).a;
  }


  vec4 frag () {
    vec2 uv = uv0;
    uv.x = startX + uv0.x * (endX - startX);
    uv.y = startY + uv0.y * (endY - startY);
    vec2 uv1 = uv0;
    uv1-=0.5;
    uv1 *= scale;
    uv1+=0.5;

    // rotate
    vec2 uv2 = uv1;
    float sine = sin(rotation / 180. * PI);
    float cosine = cos(rotation / 180. * PI);

    vec2 col1 = vec2(1.0, 0.0);
    vec2 col2 = vec2(1.0, 0.0);

    uv2-=0.5;
    mat2 mat =  mat2(cosine, -sine, sine, cosine);
    uv2 *= mat;
    uv2+=0.5;

    vec4 o = vec4(0.,0.,0., 1.);

    #if USE_TEXTURE
      o = CCSampleWithAlphaSeparated(cc_spriteTexture, uv);
    #endif

    vec2 size = vec2(0.005, 0.005);
    vec2 size_inline = vec2(0.005, 0.005);
    float inline_o = 1.;
    float outline = 0.;
    // vec4 line_color = vec4(0., 0., 0., 1.);

    // inline_o *= getAlpha(uv2 + size_inline * vec2(-1., 1.));
    // inline_o *= getAlpha(uv2 + size_inline * vec2(-1., 0.));
    // inline_o *= getAlpha(uv2 + size_inline * vec2(-1., -1.));
    // inline_o *= getAlpha(uv2 + size_inline * vec2(0., -1.));
    // inline_o *= getAlpha(uv2 + size_inline * vec2(0., 1.));
    // inline_o *= getAlpha(uv2 + size_inline * vec2(1., 1.));
    // inline_o *= getAlpha(uv2 + size_inline * vec2(1., 0.));
    // inline_o *= getAlpha(uv2 + size_inline * vec2(1., -1.));

    // outline += getAlpha(uv2 + (size_inline - size) * vec2(-1., 1.));
    // outline += getAlpha(uv2 + (size_inline - size) * vec2(-1., 0.));
    // outline += getAlpha(uv2 + (size_inline - size) * vec2(-1., -1.));
    // outline += getAlpha(uv2 + (size_inline - size) * vec2(0., -1.));
    // outline += getAlpha(uv2 + (size_inline - size) * vec2(0., 1.));
    // outline += getAlpha(uv2 + (size_inline - size) * vec2(1., 1.));
    // outline += getAlpha(uv2 + (size_inline - size) * vec2(1., 0.));
    // outline += getAlpha(uv2 + (size_inline - size) * vec2(1., -1.));



    // outline *= clamp(CCSampleWithAlphaSeparated(maskTexture, uv2 + size * vec2(0., -1.)).a, 0., 1.);
    // outline *= clamp(CCSampleWithAlphaSeparated(maskTexture, uv2 + size * vec2(0., 1.)).a, 0., 1.);
    // outline *= clamp(CCSampleWithAlphaSeparated(maskTexture, uv2 + size * vec2(1., -1.)).a, 0., 1.);
    // outline *= clamp(CCSampleWithAlphaSeparated(maskTexture, uv2 + size * vec2(1., 0.)).a, 0., 1.);
    // outline *= clamp(CCSampleWithAlphaSeparated(maskTexture, uv2 + size * vec2(1., 1.)).a, 0., 1.);
    // outline *= clamp(CCSampleWithAlphaSeparated(maskTexture, uv2 + size * vec2(-1., -1.)).a, 0., 1.);
    // outline *= clamp(CCSampleWithAlphaSeparated(maskTexture, uv2 + size * vec2(-1., 0.)).a, 0., 1.);
    // outline *= clamp(CCSampleWithAlphaSeparated(maskTexture, uv2 + size * vec2(-1., 1.)).a, 0., 1.);

    #if USE_MASK 
      vec4 mask = CCSampleWithAlphaSeparated(maskTexture, uv2);
      o.a = clamp(mask.a, 0., alphaThreshold);
    #endif

    // inline_o = (1. - inline_o) * o.a;
    // outline = min(1.0, outline) - o.a;

    // vec4 outlined_result = mix(o, line_color, (outline + inline_o) * alphaThreshold);
    // vec4 result =  mix(o, outlined_result, outlined_result.a);
    
    return o;
  }
}%
